apply plugin: 'com.android.application'

android {

    compileSdkVersion 34

    defaultConfig {
        applicationId "com.sovworks.eds.android"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 237
        versionName "2.0.0.237"
        multiDexEnabled true


        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters /*'x86', 'x86_64', 'armeabi-v7a',*/ 'arm64-v8a'
        }

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    ndkVersion = "25.1.8937393"

    signingConfigs {
        debug {
            storeFile file('../misc/keys.keystore')
            storePassword 'android'
            keyAlias 'eds-debug-key'
            keyPassword 'android'
        }
    }

    flavorDimensions "fullOrLite", "licCheckType", "inet", "fsm"

    productFlavors {

        lite {
            dimension "fullOrLite"
            applicationId "com.sovworks.edslite"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-lite.pro'
            externalNativeBuild {
                cmake {
                    targets "edsxts", "edsctr", "edsaes", "edsserpent", "edstwofish", "edsripemd160", "edswhirlpool", "fdraio", "localxts", "edscfb", "edscbc", "edsctr", "edsgost"
                }
            }
        }
        licCheckNone {
            dimension "licCheckType"
        }
        noinet {
            dimension "inet"
        }
        nofsml {
            dimension "fsm"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if ((names.contains("lite") && !names.contains("licCheckNone")) ||
                (names.contains("full") && names.contains("licCheckNone")) ||
                (names.contains("inet") && !names.contains("full")) ||
                (names.contains("fsm") && !names.contains("full")) ||
                (names.contains("nofsm") && !names.contains("full")) ||
                (names.contains("fsm") && !names.contains("inet")) ||
                (names.contains("fsm") && !names.contains("licCheckGP")) ||
                (names.contains("nofsml") && !names.contains("lite"))

        ) {
            setIgnore(true)
        }
    }

    buildTypes {

        debug {
            signingConfig signingConfigs.debug
            externalNativeBuild {

                cmake {
                    cFlags "-DDEBUG"
                }
            }
            debuggable true
            jniDebuggable true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        //checkReleaseBuilds false
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = outputFileName.replace("app-", "EDS-").replace(".apk", "-v${variant.versionName}.apk")
        }
    }

    externalNativeBuild {

        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.5'
    implementation 'com.drewnoakes:metadata-extractor:2.15.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    /*implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'*/

    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.7'
    implementation 'com.trello.rxlifecycle3:rxlifecycle:3.1.0'
    implementation 'com.trello.rxlifecycle3:rxlifecycle-android:3.1.0'
    implementation 'com.trello.rxlifecycle3:rxlifecycle-components:3.1.0'

    implementation project(':library')

    // 日志
    api "com.jakewharton.timber:timber:4.7.1"
    api "com.orhanobut:logger:2.2.0"

    implementation 'com.github.stfalcon-studio:StfalconImageViewer:v1.0.1'
    // https://www.jianshu.com/p/54bf089d0b04 解决Glide启用过渡时Placeholder变形问题
    implementation 'com.github.WenHuayu:GlidePlaceholderDrawable:1.0.0'
    //Glide 4.x https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    //implementation 'jp.wasabeef:glide-transformations:3.0.1'
    //implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.31'
    implementation "net.lingala.zip4j:zip4j:2.11.5"
    implementation("com.github.junrar:junrar:7.5.5")
}


apply from: 'build-full.gradle'

if (file('build-local').exists()) {
    apply from: 'build-local.gradle'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}